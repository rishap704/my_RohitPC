When using a remote repo many colaborator work with same repo 
hence when we need to push our changes to the the remote repo it may lead to CONFLICT if someones already pushed some changes to that repo which is conflicting.

Hence we will get an error if we try to push our changes leading to the conflict.

Hence , In this case the merge is not fast forward  we need to do Three waymerge.

*********to resolve this conflict ************

1:: Pull the remote repo 1st.

---> $ git pull         

2:: now see the log  of the remote repo to see what has been updated by the other colaborator(person working on same project).

 ---> $ git log -p origin/master

3:: also understand the conflict by observing the graphical view

---> $ git log --graph --oneline --all   // it will show a nice representation of the branches and every thing

4:: After understanding the conflict and the updation done
 open and edit all the conflict files one by one 

---> vi filename  // now we can see the changes made by other person and by you so edit accordingly and then COMMIT the changes.

5:: Now when the conflicts are solved , so Its time to Push / update our changes to the remote repo   hance push the changes.

---------> $ git push

*******And its done ***********


Its is always better to keep individual work in a separate branches so that other can review and after confirmation it can be merged to the master branch.


Hence to push a branch to the remote repo use

---> $ git push -u origin <branch name>   //to create and push the changes into a new branch in our remote repo


***************rebase***************

It is a command which is used to merger the other branches but rebasing the commit in  linearly , Hnece it makes easy to understand the changes mades in the repo

as in the merge , when we see the log we see the branches and separate logs not in a linear fashion.

But rebase does that , it also does fast forward the merge ,but in case of conflict we have to resolve it manually.

hence 1st checkout into the branch

----> $ git checkout <branch name> 

----> $ git pull  // to get updated with the remote repo

now do the rebase

---> $ git rebase master         // here the master is the brach to whome we want to rebase our current branch.

solve the conflict if any

then do ----> $git add  // in  case we solved any conflict manually
and then ----> $ git rebase --continue  

the above 2 cmd is only needed if a conflict arises.


now we can see the log by chceking out into the master branch.

now do the git merge of the rebase branch
--> $ git merge <branch name> 

now we can delete the branch in the remote repo by 
----> $ git push --delete origin <branch name>

now we can push our change to the remote repo

***************** rebase ********************
